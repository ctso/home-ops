---
version: "3"

# Borrowed from https://github.com/bjw-s/home-ops/blob/main/.taskfiles/volsync/Taskfile.yaml
#
# This taskfile is used to manage certain VolSync tasks for a given application, limitations are described below.
#   1. Fluxtomization, HelmRelease, PVC, ReplicationSource all have the same name (e.g. plex)
#   2. ReplicationSource and ReplicationDestination are a Restic repository
#   3. Applications are deployed as either a Kubernetes Deployment or StatefulSet
#   4. Each application only has one PVC that is being replicated

x-env: &env
  app: "{{.app}}"
  controller: "{{.controller}}"
  ns: "{{.ns}}"
  previous: "{{.previous}}"
  ts: "{{.ts}}"
  claim: "{{.claim}}"
  app_uid: "{{.app_uid}}"
  app_gid: "{{.app_gid}}"

vars:
  scriptsDir: "{{.ROOT_DIR}}/.taskfiles/_scripts"
  templatesDir: "{{.ROOT_DIR}}/.taskfiles/volsync/templates"
  ts: '{{now | date "150405"}}'

tasks:
  list:
    desc: List all snapshots
    summary: |
      Args:
        ns: Namespace the PVC is in (default: default)
        app: Application to list snapshots for (required)
    cmds:
      - envsubst < <(cat {{.templatesDir}}/list.tmpl.yaml) | kubectl apply -f -
      - bash {{.scriptsDir}}/wait-for-k8s-job.sh {{.app}}-list-snapshots-{{.ts}} {{.ns}}
      - kubectl -n {{.ns}} wait job/{{.app}}-list-snapshots-{{.ts}} --for condition=complete --timeout=1m
      - kubectl -n {{.ns}} logs job/{{.app}}-list-snapshots-{{.ts}} --container list
      - kubectl -n {{.ns}} delete job/{{.app}}-list-snapshots-{{.ts}}
    vars:
      app: '{{ or .app (fail "Argument app is required") }}'
      ns: '{{.ns | default "default"}}'
    env: *env
    preconditions:
      - sh: test -f {{.scriptsDir}}/wait-for-k8s-job.sh
        msg: "Wait script not found"
      - sh: test -f {{.templatesDir}}/list.tmpl.yaml
        msg: "List job template not found"
    silent: true

  snapshot:
    desc: Trigger a Restic ReplicationSource snapshot
    summary: |
      Args:
        ns: Namespace the PVC is in (default: default)
        app: Application to create snapshots for (required)
    cmds:
      - task: .suspend
        vars: *env
      - kubectl -n {{.ns}} patch replicationsources {{.app}}-r2 --type merge -p '{"spec":{"trigger":{"manual":"{{.ts}}"}}}'
      - bash {{.scriptsDir}}/wait-for-k8s-job.sh volsync-src-{{.app}}-r2 {{.ns}}
      - kubectl -n {{.ns}} wait job/volsync-src-{{.app}}-r2 --for condition=complete --timeout=120m
    vars:
      app: '{{ or .app (fail "Argument (app) is required") }}'
      ns: '{{.ns | default "default"}}'
      controller:
        sh: |
          if kubectl -n {{.ns}} get deployment.apps/{{.app}} >/dev/null 2>&1 ; then
            echo "deployment.apps/{{.app}}"
          else
            echo "statefulset.apps/{{.app}}"
          fi
    env: *env
    preconditions:
      - sh: test -f {{.scriptsDir}}/wait-for-k8s-job.sh
        msg: "Wait script not found"
      - sh: kubectl -n {{.ns}} get replicationsources {{.app}}-r2
        msg: "ReplicationSource '{{.app}}-r2' not found in namespace '{{.ns}}'"

  restore:
    desc: Trigger a Restic ReplicationSource restore
    summary: |
      Args:
        ns: Namespace the PVC is in (default: default)
        app: Application to list snapshots for (required)
        previous: Previous number of snapshots to restore (default: 2)
    cmds:
      - task: .suspend
        vars: *env
      - task: .wipe
        vars: *env
      - task: .restore
        vars: *env
      - task: .resume
        vars: *env
    vars:
      app: '{{ or .app (fail "Argument (app) is required") }}'
      ns: '{{.ns | default "default"}}'
      previous: "{{.previous | default 2}}"
      # Query to find the controller associated with the app
      controller:
        sh: |
          if kubectl -n {{.ns}} get deployment.apps/{{.app}} >/dev/null 2>&1 ; then
            echo "deployment.apps/{{.app}}"
          else
            echo "statefulset.apps/{{.app}}"
          fi
      claim:
        sh: |
          kubectl -n {{.ns}} get replicationsources/{{.app}}-r2 \
            -o jsonpath="{.spec.sourcePVC}"
      app_uid:
        sh: |
          kubectl -n {{.ns}} get replicationsources/{{.app}}-r2 \
            -o jsonpath="{.spec.restic.moverSecurityContext.runAsUser}"
      app_gid:
        sh: |
          kubectl -n {{.ns}} get replicationsources/{{.app}}-r2 \
            -o jsonpath="{.spec.restic.moverSecurityContext.runAsGroup}"
    env: *env
    preconditions:
      - sh: test -f {{.templatesDir}}/wipe.tmpl.yaml
        msg: "Wipe template not found"
      - sh: test -f {{.templatesDir}}/replicationdestination.tmpl.yaml
        msg: "ReplicationDestination template not found"
      - sh: test -f {{.scriptsDir}}/wait-for-k8s-job.sh
        msg: "Wait script not found"

  # Suspend the Flux ks and hr
  .suspend:
    internal: true
    cmds:
      - flux -n flux-system suspend kustomization {{.app}}
      - flux -n {{.ns}} suspend helmrelease {{.app}}
      - kubectl -n {{.ns}} scale {{.controller}} --replicas 0
      - kubectl -n {{.ns}} wait pod --for delete --selector="app.kubernetes.io/name={{.app}}" --timeout=2m
    env: *env

  # Wipe the PVC of all data
  .wipe:
    internal: true
    cmds:
      - envsubst < <(cat {{.templatesDir}}/wipe.tmpl.yaml) | kubectl apply -f -
      - bash {{.scriptsDir}}/wait-for-k8s-job.sh {{.app}}-wipe-{{.ts}} {{.ns}}
      - kubectl -n {{.ns}} wait job/{{.app}}-wipe-{{.ts}} --for condition=complete --timeout=120m
      - kubectl -n {{.ns}} logs job/{{.app}}-wipe-{{.ts}} --container wipe
      - kubectl -n {{.ns}} delete job {{.app}}-wipe-{{.ts}}
    env: *env

  # Create VolSync replicationdestination CR to restore data
  .restore:
    internal: true
    cmds:
      - envsubst < <(cat {{.templatesDir}}/replicationdestination.tmpl.yaml) | kubectl apply -f -
      - bash {{.scriptsDir}}/wait-for-k8s-job.sh volsync-dst-{{.app}}-{{.ts}} {{.ns}}
      - kubectl -n {{.ns}} wait job/volsync-dst-{{.app}}-{{.ts}} --for condition=complete --timeout=120m
      - kubectl -n {{.ns}} delete replicationdestination {{.app}}-{{.ts}}
    env: *env

  # Resume Flux ks and hr
  .resume:
    internal: true
    cmds:
      - flux -n {{.ns}} resume helmrelease {{.app}}
      - flux -n flux-system resume kustomization {{.app}}
    env: *env
